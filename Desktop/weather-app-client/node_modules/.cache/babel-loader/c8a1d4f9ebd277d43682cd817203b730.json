{"ast":null,"code":"var _jsxFileName = \"/Users/buiquang/Desktop/weather-app-client/src/Container/SearchForm/SearchForm.js\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport Input from '../../UI/Input/Input';\nimport Button from '../../UI/Button/Button';\nimport { updatedObject } from '../../shared/utility';\nimport * as actionCreators from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport Script from 'react-load-script';\nimport styles from './SearchForm.module.css';\n\nclass SearchForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      searchForm: {\n        city: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'City',\n            id: 'City'\n          },\n          value: '',\n          label: 'City',\n          isValid: false\n        },\n        country: {\n          elementType: 'input',\n          elementConfig: {\n            type: 'text',\n            placeholder: 'Country',\n            id: 'Country'\n          },\n          value: '',\n          label: 'Country',\n          isValid: false\n        }\n      },\n      formValid: false,\n      city: '',\n      query: ''\n    };\n\n    this.inputChangedHandler = (event, element) => {\n      let value = event.target.value;\n      let updatedElement = null;\n\n      if (value.length === 0) {\n        updatedElement = updatedObject(this.state.searchForm[element], {\n          isValid: false\n        });\n      } else {\n        updatedElement = updatedObject(this.state.searchForm[element], {\n          isValid: true,\n          value\n        });\n      }\n\n      ;\n      let updatedSearchForm = updatedObject(this.state.searchForm, {\n        [element]: updatedElement\n      });\n      let formValid = true;\n\n      for (updatedElement in updatedSearchForm) {\n        formValid = updatedSearchForm[updatedElement].isValid && formValid;\n      }\n\n      ;\n      this.setState({\n        searchForm: updatedSearchForm,\n        formValid\n      });\n    };\n\n    this.submitDataHandler = event => {\n      event.preventDefault();\n      let submitData = Object.keys(this.state.searchForm).map(el => {\n        return {\n          [el]: this.state.searchForm[el].value\n        };\n      });\n      this.props.fetchWeatherData(submitData);\n    };\n\n    this.handleScriptLoad = () => {\n      // Declare Options For Autocomplete\n      var options = {\n        types: ['(cities)']\n      }; // Initialize Google Autocomplete\n\n      /*global google*/\n      // To disable any eslint 'google not defined' errors\n\n      this.autocomplete = new google.maps.places.Autocomplete(document.getElementById('City'), options); // Avoid paying for data that you don't need by restricting the set of\n      // place fields that are returned to just the address components and formatted\n      // address.\n\n      this.autocomplete.setFields(['address_components', 'formatted_address']); // Fire Event when a suggested name is selected\n\n      this.autocomplete.addListener('place_changed', this.handlePlaceSelect);\n    };\n\n    this.handlePlaceSelect = () => {\n      // Extract City From Address Object\n      let addressObject = this.autocomplete.getPlace();\n      let address = addressObject.address_components;\n      console.log(addressObject, address); // Check if address is valid\n\n      if (address) {\n        console.log(); // Set State\n        // this.setState(\n        // {\n        //     city: address[0].long_name,\n        //     query: addressObject.formatted_address,\n        // }\n        // );\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"secondary__heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Search\"), React.createElement(\"form\", {\n      className: styles.SearchForm,\n      onSubmit: this.submitDataHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(Script, {\n      url: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDyddX6wQCk9PY-jxHnZj_8X3M3RbzuJy4&libraries=places\",\n      onLoad: event => this.handleScriptLoad(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), Object.entries(this.state.searchForm).map(el => {\n      return React.createElement(\"div\", {\n        className: \"col-4-of-12\",\n        key: el[1].label,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(Input, {\n        elementtype: el[1].elementType,\n        elementconfig: el[1].elementConfig,\n        inputId: el[1].elementConfig.id,\n        label: el[1].label,\n        changed: event => this.inputChangedHandler(event, el[0]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }));\n    }), React.createElement(Button, {\n      disabled: !this.state.formValid,\n      btnType: \"Btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"See weather\"), React.createElement(Button, {\n      btnType: \"Btn-primary\",\n      click: () => this.props.history.push('/map'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Use Map\")));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchWeatherData: submitData => dispatch(actionCreators.fetchWeatherData(submitData))\n  };\n};\n\nexport default withRouter(connect(null, mapDispatchToProps)(SearchForm));","map":{"version":3,"sources":["/Users/buiquang/Desktop/weather-app-client/src/Container/SearchForm/SearchForm.js"],"names":["React","Component","withRouter","Input","Button","updatedObject","actionCreators","connect","Script","styles","SearchForm","state","searchForm","city","elementType","elementConfig","type","placeholder","id","value","label","isValid","country","formValid","query","inputChangedHandler","event","element","target","updatedElement","length","updatedSearchForm","setState","submitDataHandler","preventDefault","submitData","Object","keys","map","el","props","fetchWeatherData","handleScriptLoad","options","types","autocomplete","google","maps","places","Autocomplete","document","getElementById","setFields","addListener","handlePlaceSelect","addressObject","getPlace","address","address_components","console","log","render","entries","history","push","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport Input from '../../UI/Input/Input';\nimport Button from '../../UI/Button/Button';\nimport { updatedObject } from '../../shared/utility';\nimport * as actionCreators from '../../store/actions/index';\nimport { connect } from 'react-redux';\n\nimport Script from 'react-load-script';\nimport styles from './SearchForm.module.css';\n\nclass SearchForm extends Component {\n    state = {\n        searchForm: {\n            city: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'City',\n                    id: 'City'\n                },\n                value: '',\n                label: 'City',\n                isValid: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Country',\n                    id: 'Country'\n                },\n                value: '',\n                label: 'Country',\n                isValid: false\n            }\n        },\n        formValid: false,\n        city: '',\n        query: ''\n    }\n\n    inputChangedHandler = (event, element) => {\n        let value = event.target.value;\n        let updatedElement = null;\n\n        if (value.length === 0) {\n            updatedElement = updatedObject(this.state.searchForm[element], { isValid: false });\n        } else {\n            updatedElement = updatedObject(this.state.searchForm[element], { isValid: true, value });\n        };\n\n        let updatedSearchForm = updatedObject(this.state.searchForm, { [element]: updatedElement });\n        let formValid = true;\n\n        for (updatedElement in updatedSearchForm) {\n            formValid = updatedSearchForm[updatedElement].isValid && formValid;\n        };\n\n        this.setState({ searchForm: updatedSearchForm, formValid });\n    }\n\n    submitDataHandler = event => {\n        event.preventDefault();\n        let submitData = Object.keys(this.state.searchForm).map(el => {\n            return {\n                [el]: this.state.searchForm[el].value\n            }\n        })\n        this.props.fetchWeatherData(submitData);\n    }\n\n    handleScriptLoad = () => {\n        // Declare Options For Autocomplete\n        var options = {\n          types: ['(cities)'],\n        };\n    \n        // Initialize Google Autocomplete\n        /*global google*/ // To disable any eslint 'google not defined' errors\n        this.autocomplete = new google.maps.places.Autocomplete(\n          document.getElementById('City'),\n          options,\n        );\n    \n        // Avoid paying for data that you don't need by restricting the set of\n        // place fields that are returned to just the address components and formatted\n        // address.\n        this.autocomplete.setFields(['address_components', 'formatted_address']);\n    \n        // Fire Event when a suggested name is selected\n        this.autocomplete.addListener('place_changed', this.handlePlaceSelect);\n    }\n\n    handlePlaceSelect = () => {\n\n        // Extract City From Address Object\n        let addressObject = this.autocomplete.getPlace();\n        let address = addressObject.address_components;\n\n        console.log(addressObject, address);\n        // Check if address is valid\n        if (address) {\n            console.log();\n            // Set State\n            // this.setState(\n            // {\n            //     city: address[0].long_name,\n            //     query: addressObject.formatted_address,\n            // }\n            // );\n        }\n        \n    }\n    \n    \n    render() {\n        return (\n            <div className=\"row\">\n                <h2 className=\"secondary__heading\">Search</h2>\n                <form className={styles.SearchForm} onSubmit={this.submitDataHandler}>\n                <Script\n                                        url=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDyddX6wQCk9PY-jxHnZj_8X3M3RbzuJy4&libraries=places\"\n                                        onLoad={event => this.handleScriptLoad(event)}\n                                        />\n                    {\n                        Object.entries(this.state.searchForm).map(el => {\n                            return (\n                                <div className=\"col-4-of-12\" key={el[1].label}>\n                                    \n                                    <Input \n                                        elementtype={el[1].elementType} \n                                        elementconfig={el[1].elementConfig}\n                                        inputId={el[1].elementConfig.id}\n                                        label={el[1].label}\n                                        changed={event => this.inputChangedHandler(event, el[0])}/> \n                                </div>\n                            )\n                        })\n                    }\n                    <Button disabled={!this.state.formValid} btnType='Btn-primary'>See weather</Button>\n                    <Button btnType='Btn-primary' click={() => this.props.history.push('/map')}>Use Map</Button>\n                </form>\n            </div>\n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchWeatherData: (submitData) => dispatch(actionCreators.fetchWeatherData(submitData))\n    }\n}\n\nexport default withRouter(connect(null, mapDispatchToProps)(SearchForm));"]},"metadata":{},"sourceType":"module"}