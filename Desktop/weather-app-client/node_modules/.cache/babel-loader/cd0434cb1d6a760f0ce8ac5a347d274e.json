{"ast":null,"code":"var _jsxFileName = \"/Users/buiquang/Desktop/weather-app-client/src/Container/MyCities/MyCities.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreators from '../../store/actions/index';\nimport Aux from 'react-aux';\nimport WeatherResultItem from '../../component/WeatherResult/WeatherResultItem/WeatherResultItem';\nimport './MyCities.css';\nimport withAuthorization from '../../hoc/withAuthorization';\nimport { withFirebase } from '../../component/Firebase';\n\nclass MyCities extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      listCity: []\n    };\n\n    this.removeDataHandler = id => {\n      this.props.removeCityData(id);\n    };\n  }\n\n  componentDidMount() {\n    let uid = localStorage.getItem('uid');\n    this.props.firebase.db.collection('cities').where('userUid', '==', uid).get().then(docSnapshot => {\n      if (docSnapshot) {\n        docSnapshot.forEach(doc => {\n          console.log(doc.data());\n          let listCity = [...this.state.listCity];\n          listCity.push(doc.data());\n          this.setState({\n            listCity\n          });\n        });\n        console.log(this.state.listCity);\n      } else {\n        console.log('No such document');\n      }\n    }).catch(error => {\n      console.log('Getting error', error);\n    }); // this.props.getCityData(this.props.userCityId);\n  }\n\n  render() {\n    let listUserCity = null;\n\n    if (this.state.listCity == '') {\n      listUserCity = React.createElement(\"div\", {\n        className: \"addAccount\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"secondary__heading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, \"Please add your city\"));\n    } else {// listUserCity = this.state.listCity.map(city => (\n      //     <div key={city.name}>\n      //         <WeatherResultItem \n      //         forUser\n      //         cityName={city.name}\n      //         temp={Math.round(city.temp)}\n      //         tempMin={city.temp_min}\n      //         tempMax={city.temp_max}\n      //         humidity={city.humidity}\n      //         windSpeed={city.wind.speed}\n      //         windDeg={city.wind.deg}\n      //         remove={() => this.removeDataHandler(city.id)}\n      //         description={city.weather[0].main}/>\n      //     </div>\n      // ));  \n    }\n\n    return React.createElement(Aux, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row col-6-of-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"primary__heading title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Save weather for your adventures\")), this.props.userCityId.length !== 0 && React.createElement(\"h2\", {\n      className: \"secondary__heading\",\n      style: {\n        marginTop: '6rem'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Your saved cities\"), listUserCity);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    userCityId: state.user.idList,\n    listCity: state.user.listCity\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCityData: id => dispatch(actionCreators.getCityData(id)),\n    removeCityData: id => dispatch(actionCreators.removeCityData(id))\n  };\n};\n\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(withFirebase(connect(mapStateToProps, mapDispatchToProps)(MyCities)));","map":{"version":3,"sources":["/Users/buiquang/Desktop/weather-app-client/src/Container/MyCities/MyCities.js"],"names":["React","Component","connect","actionCreators","Aux","WeatherResultItem","withAuthorization","withFirebase","MyCities","state","listCity","removeDataHandler","id","props","removeCityData","componentDidMount","uid","localStorage","getItem","firebase","db","collection","where","get","then","docSnapshot","forEach","doc","console","log","data","push","setState","catch","error","render","listUserCity","userCityId","length","marginTop","mapStateToProps","user","idList","mapDispatchToProps","dispatch","getCityData","condition","authUser"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreators from '../../store/actions/index';\nimport Aux from 'react-aux';\nimport WeatherResultItem from '../../component/WeatherResult/WeatherResultItem/WeatherResultItem';\n\nimport './MyCities.css';\nimport withAuthorization from '../../hoc/withAuthorization';\nimport { withFirebase } from '../../component/Firebase';\n\nclass MyCities extends Component {\n    state = {\n        listCity: []\n    }\n    componentDidMount () {\n        let uid = localStorage.getItem('uid');\n        this.props.firebase.db.collection('cities').where('userUid', '==', uid).get()\n            .then(docSnapshot => {\n                \n                if (docSnapshot) {\n                    docSnapshot.forEach(doc => {\n                        console.log(doc.data())\n                        let listCity = [...this.state.listCity];\n                        listCity.push(doc.data());\n                        this.setState({ listCity });\n                    });\n                    console.log(this.state.listCity);\n                } else {\n                    console.log('No such document');\n                }    \n            })\n            .catch(error => {\n                console.log('Getting error', error);\n            });\n        // this.props.getCityData(this.props.userCityId);\n    }\n\n    removeDataHandler = (id) => {\n        this.props.removeCityData(id);\n    }\n\n    render() {\n        let listUserCity = null;\n\n        if (this.state.listCity == '') {\n            listUserCity = (\n                <div className=\"addAccount\">\n                    <h2 className=\"secondary__heading\">Please add your city</h2>\n                </div>\n            )\n        } else {\n            // listUserCity = this.state.listCity.map(city => (\n            //     <div key={city.name}>\n            //         <WeatherResultItem \n            //         forUser\n            //         cityName={city.name}\n            //         temp={Math.round(city.temp)}\n            //         tempMin={city.temp_min}\n            //         tempMax={city.temp_max}\n            //         humidity={city.humidity}\n            //         windSpeed={city.wind.speed}\n            //         windDeg={city.wind.deg}\n            //         remove={() => this.removeDataHandler(city.id)}\n            //         description={city.weather[0].main}/>\n            //     </div>\n            // ));  \n        }\n        return (\n            <Aux>\n                <div className=\"row col-6-of-12\">\n                    <h1 className=\"primary__heading title\">Save weather for your adventures</h1>\n                </div>\n                {this.props.userCityId.length !== 0 && <h2 className=\"secondary__heading\" style={{marginTop: '6rem'}}>Your saved cities</h2>}   \n                {listUserCity}\n            </Aux>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        userCityId: state.user.idList,\n        listCity: state.user.listCity\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getCityData: (id) => dispatch(actionCreators.getCityData(id)),\n        removeCityData: (id) => dispatch(actionCreators.removeCityData(id))\n    }\n}\n\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(withFirebase((connect(mapStateToProps, mapDispatchToProps)(MyCities))));"]},"metadata":{},"sourceType":"module"}