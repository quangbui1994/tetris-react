{"ast":null,"code":"var _jsxFileName = \"/Users/buiquang/Desktop/weather-app-client/src/Container/MyCities/MyCities.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreators from '../../store/actions/index';\nimport Aux from 'react-aux';\nimport WeatherResultItem from '../../component/WeatherResult/WeatherResultItem/WeatherResultItem';\nimport './MyCities.css';\nimport withAuthorization from '../../hoc/withAuthorization';\nimport { withFirebase } from '../../component/Firebase';\n\nclass MyCities extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      listCity: []\n    };\n\n    this.removeDataHandler = id => {\n      this.props.removeCityData(id);\n    };\n  }\n\n  componentDidMount() {\n    let uid = localStorage.getItem('uid');\n    this.props.firebase.db.collection('cities').where('uid', '==', uid).get().then(docSnapshot => {\n      docSnapshot.forEach(doc => {\n        let updatedListCity = [this.state.listCity];\n      });\n    }); // this.props.getCityData(this.props.userCityId);\n  }\n\n  render() {\n    let listUserCity = null;\n\n    if (this.props.listCity == '') {\n      listUserCity = React.createElement(\"div\", {\n        className: \"addAccount\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"secondary__heading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, \"Please add your city\"));\n    } else {\n      listUserCity = this.props.listCity.map(city => React.createElement(\"div\", {\n        key: city.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(WeatherResultItem, {\n        forUser: true,\n        cityName: city.name,\n        temp: Math.round(city.main.temp),\n        tempMin: city.main.temp_min,\n        tempMax: city.main.temp_max,\n        humidity: city.main.humidity,\n        windSpeed: city.wind.speed,\n        windDeg: city.wind.deg,\n        remove: () => this.removeDataHandler(city.id),\n        description: city.weather[0].main,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      })));\n    }\n\n    return React.createElement(Aux, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row col-6-of-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"primary__heading title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Save weather for your adventures\")), this.props.userCityId.length !== 0 && React.createElement(\"h2\", {\n      className: \"secondary__heading\",\n      style: {\n        marginTop: '6rem'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Your saved cities\"), listUserCity);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    userCityId: state.user.idList,\n    listCity: state.user.listCity\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCityData: id => dispatch(actionCreators.getCityData(id)),\n    removeCityData: id => dispatch(actionCreators.removeCityData(id))\n  };\n};\n\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(withFirebase(connect(mapStateToProps, mapDispatchToProps)(MyCities)));","map":{"version":3,"sources":["/Users/buiquang/Desktop/weather-app-client/src/Container/MyCities/MyCities.js"],"names":["React","Component","connect","actionCreators","Aux","WeatherResultItem","withAuthorization","withFirebase","MyCities","state","listCity","removeDataHandler","id","props","removeCityData","componentDidMount","uid","localStorage","getItem","firebase","db","collection","where","get","then","docSnapshot","forEach","doc","updatedListCity","render","listUserCity","map","city","name","Math","round","main","temp","temp_min","temp_max","humidity","wind","speed","deg","weather","userCityId","length","marginTop","mapStateToProps","user","idList","mapDispatchToProps","dispatch","getCityData","condition","authUser"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actionCreators from '../../store/actions/index';\nimport Aux from 'react-aux';\nimport WeatherResultItem from '../../component/WeatherResult/WeatherResultItem/WeatherResultItem';\n\nimport './MyCities.css';\nimport withAuthorization from '../../hoc/withAuthorization';\nimport { withFirebase } from '../../component/Firebase';\n\nclass MyCities extends Component {\n    state = {\n        listCity: []\n    }\n    componentDidMount () {\n        let uid = localStorage.getItem('uid');\n        this.props.firebase.db.collection('cities').where('uid', '==', uid).get().then(docSnapshot => {\n            docSnapshot.forEach(doc => {\n                let updatedListCity = [this.state.listCity]\n            });\n        });\n        // this.props.getCityData(this.props.userCityId);\n    }\n\n    removeDataHandler = (id) => {\n        this.props.removeCityData(id);\n    }\n\n    render() {\n        let listUserCity = null;\n\n        if (this.props.listCity == '') {\n            listUserCity = (\n                <div className=\"addAccount\">\n                    <h2 className=\"secondary__heading\">Please add your city</h2>\n                </div>\n            )\n        } else {\n            listUserCity = this.props.listCity.map(city => (\n                <div key={city.name}>\n                    <WeatherResultItem \n                    forUser\n                    cityName={city.name}\n                    temp={Math.round(city.main.temp)}\n                    tempMin={city.main.temp_min}\n                    tempMax={city.main.temp_max}\n                    humidity={city.main.humidity}\n                    windSpeed={city.wind.speed}\n                    windDeg={city.wind.deg}\n                    remove={() => this.removeDataHandler(city.id)}\n                    description={city.weather[0].main}/>\n                </div>\n            ));  \n        }\n        return (\n            <Aux>\n                <div className=\"row col-6-of-12\">\n                    <h1 className=\"primary__heading title\">Save weather for your adventures</h1>\n                </div>\n                {this.props.userCityId.length !== 0 && <h2 className=\"secondary__heading\" style={{marginTop: '6rem'}}>Your saved cities</h2>}   \n                {listUserCity}\n            </Aux>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        userCityId: state.user.idList,\n        listCity: state.user.listCity\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getCityData: (id) => dispatch(actionCreators.getCityData(id)),\n        removeCityData: (id) => dispatch(actionCreators.removeCityData(id))\n    }\n}\n\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(withFirebase((connect(mapStateToProps, mapDispatchToProps)(MyCities))));"]},"metadata":{},"sourceType":"module"}