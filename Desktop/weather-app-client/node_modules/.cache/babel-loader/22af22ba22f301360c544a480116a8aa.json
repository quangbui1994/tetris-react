{"ast":null,"code":"import _objectSpread from \"/Users/buiquang/Documents/My Own Things/Study/My Products/weather-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/buiquang/Documents/My Own Things/Study/My Products/weather-app/client/src/Container/Auth/Auth.js\";\nimport React, { Component } from 'react';\nimport { withRouter, Redirect } from 'react-router';\nimport Aux from 'react-aux';\nimport { updatedObject } from '../../shared/utility';\nimport * as actionCreators from '../../store/actions/index';\nimport { connect } from 'react-redux';\nimport Input from '../../UI/Input/Input';\nimport Button from '../../UI/Button/Button';\nimport './Auth.css'; // import LoginButton from '../../UI/LoginButton/LoginButton';\n\nimport ErrorHandler from './ErrorHandler/ErrorHandler';\nimport Spinner from '../../UI/Spinner/Spinner';\nimport { withFirebase } from '../../component/Firebase';\nconst INITIAL_STATE = {\n  controls: {\n    email: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: 'Email'\n      },\n      label: 'Email:',\n      value: '',\n      validation: {\n        required: true,\n        isEmail: true\n      },\n      valid: false,\n      touched: false\n    },\n    password: {\n      elementType: 'input',\n      elementConfig: {\n        type: 'password',\n        placeholder: 'Password'\n      },\n      label: 'Password:',\n      value: '',\n      validation: {\n        required: true,\n        minLength: 6\n      },\n      valid: false,\n      touched: false\n    }\n  },\n  isFormValid: false,\n  goSignup: false,\n  error: null\n};\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = _objectSpread({}, INITIAL_STATE);\n\n    this.authModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          goSignup: !prevState.goSignup\n        };\n      });\n    };\n\n    this.validCheckHandler = element => {\n      let updatedElement = _objectSpread({}, this.state.controls[element]);\n\n      if (updatedElement.value.length > 0) {\n        updatedElement = updatedObject(updatedElement, {\n          valid: true\n        });\n      }\n\n      let updatedControls = updatedObject(this.state.controls, {\n        [element]: updatedElement\n      });\n      let isFormValid = true;\n\n      for (updatedElement in updatedControls) {\n        isFormValid = updatedControls[updatedElement].valid && isFormValid;\n      }\n\n      ;\n      this.setState({\n        controls: updatedControls,\n        isFormValid\n      });\n    };\n\n    this.inputChangedHandler = (event, element) => {\n      let value = event.target.value;\n      let updatedElement;\n\n      if (value.length > 0) {\n        updatedElement = updatedObject(this.state.controls[element], {\n          valid: true,\n          value,\n          touched: true\n        });\n      } else {\n        updatedElement = updatedObject(this.state.controls[element], {\n          valid: false,\n          value\n        });\n      }\n\n      let updatedControls = updatedObject(this.state.controls, {\n        [element]: updatedElement\n      });\n      let isFormValid = true;\n\n      for (updatedElement in updatedControls) {\n        isFormValid = updatedControls[updatedElement].valid && isFormValid;\n      }\n\n      ;\n      this.setState({\n        controls: updatedControls,\n        isFormValid\n      });\n    };\n\n    this.submitFormHandler = event => {\n      const email = this.state.controls.email.value;\n      const password = this.state.controls.password.value;\n      event.preventDefault();\n      this.props.firebase.doCreateUserWithEmailAndPassword(email, password).then(authUser => {\n        this.setState(_objectSpread({}, INITIAL_STATE));\n      }).catch(error => this.setState({\n        error\n      }));\n    };\n  }\n\n  render() {\n    let input = Object.entries(this.state.controls).map(el => {\n      return React.createElement(\"div\", {\n        key: el[0],\n        className: \"row col-12-of-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-6-of-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Input, {\n        valid: el[1].valid,\n        elementtype: el[1].elementType,\n        elementconfig: el[1].elementConfig,\n        value: el[1].value,\n        label: el[1].label,\n        touched: el[1].touched,\n        changed: event => this.inputChangedHandler(event, el[0]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      })));\n    });\n    let errorMessage = React.createElement(\"div\", {\n      className: \"row col-12-of-12 errorMessage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(ErrorHandler, {\n      errtype: this.props.err,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }));\n    let authForm = React.createElement(Aux, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row col-6-of-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"primary__heading title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, this.state.goSignup === true ? 'Sign up' : 'Log in')), errorMessage, React.createElement(\"form\", {\n      className: \"Form\",\n      onSubmit: this.submitFormHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, input, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Button, {\n      disabled: !this.state.isFormValid,\n      btnType: \"Btn-primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(Button, {\n      type: \"button\",\n      btnType: \"Switch\",\n      click: () => this.authModeHandler(this.state.goSignup),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"SWITCH TO \", this.state.goSignup ? 'LOGIN' : 'SIGN UP'))));\n\n    if (this.props.spinner) {\n      authForm = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      });\n    }\n\n    let token = localStorage.getItem('token');\n\n    if (token) {\n      authForm = React.createElement(Redirect, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(Aux, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, authForm);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    token: state.auth.token,\n    err: state.auth.err,\n    spinner: state.auth.spinner\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    authHandler: (email, password, goSignup) => dispatch(actionCreators.authHandler(email, password, goSignup))\n  };\n};\n\nexport default withRouter(withFirebase(connect(mapStateToProps, mapDispatchToProps)(Auth)));","map":{"version":3,"sources":["/Users/buiquang/Documents/My Own Things/Study/My Products/weather-app/client/src/Container/Auth/Auth.js"],"names":["React","Component","withRouter","Redirect","Aux","updatedObject","actionCreators","connect","Input","Button","ErrorHandler","Spinner","withFirebase","INITIAL_STATE","controls","email","elementType","elementConfig","type","placeholder","label","value","validation","required","isEmail","valid","touched","password","minLength","isFormValid","goSignup","error","Auth","state","authModeHandler","setState","prevState","validCheckHandler","element","updatedElement","length","updatedControls","inputChangedHandler","event","target","submitFormHandler","preventDefault","props","firebase","doCreateUserWithEmailAndPassword","then","authUser","catch","render","input","Object","entries","map","el","errorMessage","err","authForm","spinner","token","localStorage","getItem","mapStateToProps","auth","mapDispatchToProps","dispatch","authHandler"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter, Redirect } from 'react-router';\nimport Aux from 'react-aux';\nimport { updatedObject } from '../../shared/utility';\nimport * as actionCreators from '../../store/actions/index';\nimport { connect } from 'react-redux';\n\nimport Input from '../../UI/Input/Input';\nimport Button from '../../UI/Button/Button';\nimport './Auth.css';\n// import LoginButton from '../../UI/LoginButton/LoginButton';\nimport ErrorHandler from './ErrorHandler/ErrorHandler';\nimport Spinner from '../../UI/Spinner/Spinner';\nimport { withFirebase } from '../../component/Firebase';\n\nconst INITIAL_STATE = {\n    controls: {\n        email: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'text',\n                placeholder: 'Email'\n            },\n            label: 'Email:',\n            value: '',\n            validation: {\n                required: true,\n                isEmail: true\n            },\n            valid: false,\n            touched: false\n        },\n        password: {\n            elementType: 'input',\n            elementConfig: {\n                type: 'password',\n                placeholder: 'Password'\n            },\n            label: 'Password:',\n            value: '',\n            validation: {\n                required: true,\n                minLength: 6\n            },\n            valid: false,\n            touched: false\n        }\n    },\n    isFormValid: false,\n    goSignup: false,\n    error: null\n}\n\nclass Auth extends Component {\n    state = {...INITIAL_STATE};\n\n    authModeHandler = () => {\n        this.setState(prevState => {\n            return {\n                goSignup: !prevState.goSignup\n            };\n        });\n    }\n\n    validCheckHandler = element => {\n        let updatedElement = {...this.state.controls[element]};\n        if (updatedElement.value.length > 0) {\n            updatedElement = updatedObject(updatedElement, { valid: true })\n        }\n\n        let updatedControls = updatedObject(this.state.controls, { [element]: updatedElement });\n        let isFormValid = true;\n        for (updatedElement in updatedControls) {\n            isFormValid = updatedControls[updatedElement].valid && isFormValid;\n        };\n        this.setState({ controls: updatedControls, isFormValid});\n    }\n\n    inputChangedHandler = (event, element) => {\n        let value = event.target.value;\n        let updatedElement;\n\n        if (value.length > 0) {\n            updatedElement = updatedObject(this.state.controls[element], { valid: true, value, touched: true })\n        } else {\n            updatedElement = updatedObject(this.state.controls[element], { valid: false, value })\n        }\n\n        let updatedControls = updatedObject(this.state.controls, { [element]: updatedElement });\n        let isFormValid = true;\n        for (updatedElement in updatedControls) {\n            isFormValid = updatedControls[updatedElement].valid && isFormValid;\n        };\n        this.setState({ controls: updatedControls, isFormValid});\n    }\n\n    submitFormHandler = (event) => {\n        const email = this.state.controls.email.value;\n        const password = this.state.controls.password.value;\n        event.preventDefault();\n        this.props.firebase\n            .doCreateUserWithEmailAndPassword(email, password)\n            .then(authUser => {\n                this.setState({...INITIAL_STATE});\n            })\n            .catch(error => this.setState({error}));\n    }\n\n    render() {\n        let input = Object.entries(this.state.controls).map(el => {\n            return (\n                <div key={el[0]} className=\"row col-12-of-12\">\n                    <div className=\"col-6-of-12\">\n                        <Input \n                        valid={el[1].valid}\n                        elementtype={el[1].elementType}\n                        elementconfig={el[1].elementConfig}\n                        value={el[1].value}\n                        label={el[1].label}\n                        touched={el[1].touched}\n                        changed={event => this.inputChangedHandler(event, el[0])}/>\n                    </div>   \n                </div>\n            )\n        });\n\n        let errorMessage = (\n            <div className=\"row col-12-of-12 errorMessage\">\n                <ErrorHandler errtype={this.props.err} />\n            </div>\n        )\n        \n        let authForm = (\n            <Aux>\n                <div className=\"row col-6-of-12\">\n                    <h1 className=\"primary__heading title\">{this.state.goSignup === true ? 'Sign up' : 'Log in'}</h1>\n                </div>\n                {errorMessage}\n                <form className=\"Form\" onSubmit={this.submitFormHandler}>\n                    {input}\n                    <div className=\"row\">\n                        <Button disabled={!this.state.isFormValid} btnType='Btn-primary'>Submit</Button>\n                        <Button type=\"button\" btnType=\"Switch\" click={() => this.authModeHandler(this.state.goSignup)}>SWITCH TO {this.state.goSignup ? 'LOGIN' : 'SIGN UP'}</Button> \n                    </div>          \n                </form>\n            </Aux>\n            \n        )\n\n        if (this.props.spinner) {\n            authForm = <Spinner />\n        }\n        \n        let token = localStorage.getItem('token')\n        if (token) {\n            authForm = <Redirect to=\"/\"/>\n        }\n\n        return (\n            <Aux>\n                {authForm}\n            </Aux>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        token: state.auth.token,\n        err: state.auth.err,\n        spinner: state.auth.spinner\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        authHandler: (email, password, goSignup) => dispatch(actionCreators.authHandler(email, password, goSignup))\n    }\n}\n\nexport default withRouter(withFirebase(connect(mapStateToProps, mapDispatchToProps)(Auth)));"]},"metadata":{},"sourceType":"module"}