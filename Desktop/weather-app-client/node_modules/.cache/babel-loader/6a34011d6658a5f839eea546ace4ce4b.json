{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updatedObject } from '../../shared/utility';\nconst initialState = {\n  city: 0,\n  spinner: false\n};\n\nconst getWeatherData = (state, actions) => {\n  let city = updatedObject(state.city, {\n    id: actions.value.id,\n    name: actions.value.name,\n    temp: actions.value.main.temp,\n    tempMin: actions.value.main.temp_min,\n    tempMax: actions.value.main.temp_max,\n    humidity: actions.value.main.humidity,\n    wind: actions.value.wind,\n    weather: actions.value.weather\n  });\n  return updatedObject(state, {\n    city,\n    spinner: false\n  });\n};\n\nconst reducer = (state = initialState, actions) => {\n  switch (actions.type) {\n    case actionTypes.FETCH_WEATHER_DATA_START:\n      return updatedObject(state, {\n        spinner: true\n      });\n\n    case actionTypes.FETCH_WEATHER_DATA_SUCCESS:\n      return getWeatherData(state, actions);\n\n    case actionTypes.SET_INITIAL_DATA_SUCCESS:\n      return updatedObject(state, {\n        city: actions.res,\n        spinner: false\n      });\n\n    case actionTypes.SET_INITIAL_DATA_START:\n      return updatedObject(state, {\n        spinner: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/buiquang/Desktop/weather-app/src/store/reducers/weather.js"],"names":["actionTypes","updatedObject","initialState","city","spinner","getWeatherData","state","actions","id","value","name","temp","main","tempMin","temp_min","tempMax","temp_max","humidity","wind","weather","reducer","type","FETCH_WEATHER_DATA_START","FETCH_WEATHER_DATA_SUCCESS","SET_INITIAL_DATA_SUCCESS","res","SET_INITIAL_DATA_START"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,SAASC,aAAT,QAA8B,sBAA9B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,CADW;AAEjBC,EAAAA,OAAO,EAAE;AAFQ,CAArB;;AAKA,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAQC,OAAR,KAAoB;AACvC,MAAIJ,IAAI,GAAGF,aAAa,CAACK,KAAK,CAACH,IAAP,EAAa;AACjCK,IAAAA,EAAE,EAAED,OAAO,CAACE,KAAR,CAAcD,EADe;AAEjCE,IAAAA,IAAI,EAAEH,OAAO,CAACE,KAAR,CAAcC,IAFa;AAGjCC,IAAAA,IAAI,EAAEJ,OAAO,CAACE,KAAR,CAAcG,IAAd,CAAmBD,IAHQ;AAIjCE,IAAAA,OAAO,EAAEN,OAAO,CAACE,KAAR,CAAcG,IAAd,CAAmBE,QAJK;AAKjCC,IAAAA,OAAO,EAAER,OAAO,CAACE,KAAR,CAAcG,IAAd,CAAmBI,QALK;AAMjCC,IAAAA,QAAQ,EAAEV,OAAO,CAACE,KAAR,CAAcG,IAAd,CAAmBK,QANI;AAOjCC,IAAAA,IAAI,EAAEX,OAAO,CAACE,KAAR,CAAcS,IAPa;AAQjCC,IAAAA,OAAO,EAAEZ,OAAO,CAACE,KAAR,CAAcU;AARU,GAAb,CAAxB;AASA,SAAOlB,aAAa,CAACK,KAAD,EAAQ;AAAEH,IAAAA,IAAF;AAAQC,IAAAA,OAAO,EAAE;AAAjB,GAAR,CAApB;AACH,CAXD;;AAaA,MAAMgB,OAAO,GAAG,CAACd,KAAK,GAAGJ,YAAT,EAAuBK,OAAvB,KAAmC;AAC/C,UAAQA,OAAO,CAACc,IAAhB;AACI,SAAKrB,WAAW,CAACsB,wBAAjB;AACI,aAAOrB,aAAa,CAACK,KAAD,EAAQ;AAAEF,QAAAA,OAAO,EAAE;AAAX,OAAR,CAApB;;AACJ,SAAKJ,WAAW,CAACuB,0BAAjB;AACI,aAAOlB,cAAc,CAACC,KAAD,EAAQC,OAAR,CAArB;;AACJ,SAAKP,WAAW,CAACwB,wBAAjB;AACI,aAAOvB,aAAa,CAACK,KAAD,EAAQ;AAAEH,QAAAA,IAAI,EAAEI,OAAO,CAACkB,GAAhB;AAAqBrB,QAAAA,OAAO,EAAE;AAA9B,OAAR,CAApB;;AACJ,SAAKJ,WAAW,CAAC0B,sBAAjB;AACI,aAAOzB,aAAa,CAACK,KAAD,EAAQ;AAAEF,QAAAA,OAAO,EAAE;AAAX,OAAR,CAApB;;AACJ;AACI,aAAOE,KAAP;AAVR;AAYH,CAbD;;AAeA,eAAec,OAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes';\nimport { updatedObject } from '../../shared/utility';\n\nconst initialState = {\n    city: 0,\n    spinner: false\n};\n\nconst getWeatherData = (state, actions) => {\n    let city = updatedObject(state.city, {\n        id: actions.value.id, \n        name: actions.value.name, \n        temp: actions.value.main.temp, \n        tempMin: actions.value.main.temp_min,\n        tempMax: actions.value.main.temp_max,\n        humidity: actions.value.main.humidity,\n        wind: actions.value.wind,\n        weather: actions.value.weather});\n    return updatedObject(state, { city, spinner: false });\n}\n\nconst reducer = (state = initialState, actions) => {\n    switch (actions.type) {\n        case actionTypes.FETCH_WEATHER_DATA_START:\n            return updatedObject(state, { spinner: true });\n        case actionTypes.FETCH_WEATHER_DATA_SUCCESS:\n            return getWeatherData(state, actions);\n        case actionTypes.SET_INITIAL_DATA_SUCCESS:\n            return updatedObject(state, { city: actions.res, spinner: false });\n        case actionTypes.SET_INITIAL_DATA_START:\n            return updatedObject(state, { spinner: true });\n        default:\n            return state;\n    }\n}\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}