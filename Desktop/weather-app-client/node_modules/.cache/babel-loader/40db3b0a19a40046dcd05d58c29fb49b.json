{"ast":null,"code":"var _jsxFileName = \"/Users/buiquang/Desktop/weather-app-client/src/component/WeatherResult/WeatherResult.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport Aux from 'react-aux';\nimport WeatherResultItem from './WeatherResultItem/WeatherResultItem';\nimport * as actionCreators from '../../store/actions/index';\nimport { getDate } from '../../shared/utility'; // import cityService from '../../services/city';\n\nimport { withFirebase } from '../Firebase';\n\nclass WeatherResult extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.saveDataHandler = (name, temp, tempMax, tempMin, humidity, id, localId) => {\n      const isAuthenticated = localStorage.getItem('token');\n      const uid = localStorage.getItem('uid');\n\n      if (isAuthenticated) {\n        console.log(id, localId);\n        this.props.firebase.db.collection('cities').doc(name).set({\n          name,\n          cityId: id,\n          uid\n        }); // this.props.saveDataHandler(id, localId);\n        // cityService.saveCity(this.props.city)\n        //     .then(res => res)\n        //     .catch(error => console.log('error'));\n      } else {\n        this.props.history.push('/login');\n      }\n    };\n  }\n\n  render() {\n    let resultSection = this.props.city === null ? '' : React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-12-of-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"third__heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"third__heading--first\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"Today /\"), React.createElement(\"span\", {\n      className: \"third__heading--second\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, getDate()))), React.createElement(WeatherResultItem, {\n      cityName: this.props.city.name,\n      temp: Math.round(this.props.city.temp),\n      tempMin: this.props.city.temp_min,\n      tempMax: this.props.city.temp_max,\n      humidity: this.props.city.humidity,\n      windSpeed: this.props.city.wind.speed,\n      windDeg: this.props.city.wind.deg,\n      description: this.props.city.weather[0].main,\n      remove: () => this.removeDataHandler(this.props.city.id),\n      add: () => this.saveDataHandler(this.props.city.name, this.props.city.temp, this.props.city.temp_min, this.props.city.temp_max, this.props.city.humidity, this.props.city.wind.speed, this.props.city.wind.deg, this.props.city.id, this.props.city.weather[0].main, this.props.localId),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }));\n    return React.createElement(Aux, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, resultSection);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    city: state.weather.city,\n    localId: state.auth.localId,\n    isAuthenticated: state.auth.token\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    saveDataHandler: (id, user) => dispatch(actionCreators.saveDataHandler(id, user))\n  };\n};\n\nexport default withRouter(withFirebase(connect(mapStateToProps, mapDispatchToProps)(WeatherResult)));","map":{"version":3,"sources":["/Users/buiquang/Desktop/weather-app-client/src/component/WeatherResult/WeatherResult.js"],"names":["React","Component","connect","withRouter","Aux","WeatherResultItem","actionCreators","getDate","withFirebase","WeatherResult","saveDataHandler","name","temp","tempMax","tempMin","humidity","id","localId","isAuthenticated","localStorage","getItem","uid","console","log","props","firebase","db","collection","doc","set","cityId","history","push","render","resultSection","city","Math","round","temp_min","temp_max","wind","speed","deg","weather","main","removeDataHandler","mapStateToProps","state","auth","token","mapDispatchToProps","dispatch","user"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAOC,GAAP,MAAgB,WAAhB;AAEA,OAAOC,iBAAP,MAA8B,uCAA9B;AACA,OAAO,KAAKC,cAAZ,MAAgC,2BAAhC;AACA,SAASC,OAAT,QAAwB,sBAAxB,C,CACA;;AACA,SAASC,YAAT,QAA6B,aAA7B;;AAEA,MAAMC,aAAN,SAA4BR,SAA5B,CAAsC;AAAA;AAAA;;AAAA,SAClCS,eADkC,GAChB,CAACC,IAAD,EAAOC,IAAP,EAAaC,OAAb,EAAsBC,OAAtB,EAA+BC,QAA/B,EAA0CC,EAA1C,EAA8CC,OAA9C,KAA0D;AACxE,YAAMC,eAAe,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAxB;AACA,YAAMC,GAAG,GAAGF,YAAY,CAACC,OAAb,CAAqB,KAArB,CAAZ;;AACA,UAAIF,eAAJ,EAAqB;AACjBI,QAAAA,OAAO,CAACC,GAAR,CAAYP,EAAZ,EAAgBC,OAAhB;AACA,aAAKO,KAAL,CAAWC,QAAX,CAAoBC,EAApB,CAAuBC,UAAvB,CAAkC,QAAlC,EAA4CC,GAA5C,CAAgDjB,IAAhD,EAAsDkB,GAAtD,CAA0D;AACtDlB,UAAAA,IADsD;AAEtDmB,UAAAA,MAAM,EAAEd,EAF8C;AAGtDK,UAAAA;AAHsD,SAA1D,EAFiB,CAOjB;AACA;AACA;AACA;AACH,OAXD,MAWO;AACH,aAAKG,KAAL,CAAWO,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB;AACH;AACJ,KAlBiC;AAAA;;AAoBlCC,EAAAA,MAAM,GAAG;AACL,QAAIC,aAAa,GAAG,KAAKV,KAAL,CAAWW,IAAX,KAAoB,IAApB,GAA2B,EAA3B,GAChB;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,SAAS,EAAC,uBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAEI;AAAM,MAAA,SAAS,EAAC,wBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0C5B,OAAO,EAAjD,CAFJ,CADJ,CADJ,EAOI,oBAAC,iBAAD;AACI,MAAA,QAAQ,EAAE,KAAKiB,KAAL,CAAWW,IAAX,CAAgBxB,IAD9B;AAEI,MAAA,IAAI,EAAEyB,IAAI,CAACC,KAAL,CAAW,KAAKb,KAAL,CAAWW,IAAX,CAAgBvB,IAA3B,CAFV;AAGI,MAAA,OAAO,EAAE,KAAKY,KAAL,CAAWW,IAAX,CAAgBG,QAH7B;AAII,MAAA,OAAO,EAAE,KAAKd,KAAL,CAAWW,IAAX,CAAgBI,QAJ7B;AAKI,MAAA,QAAQ,EAAE,KAAKf,KAAL,CAAWW,IAAX,CAAgBpB,QAL9B;AAMI,MAAA,SAAS,EAAE,KAAKS,KAAL,CAAWW,IAAX,CAAgBK,IAAhB,CAAqBC,KANpC;AAOI,MAAA,OAAO,EAAE,KAAKjB,KAAL,CAAWW,IAAX,CAAgBK,IAAhB,CAAqBE,GAPlC;AAQI,MAAA,WAAW,EAAE,KAAKlB,KAAL,CAAWW,IAAX,CAAgBQ,OAAhB,CAAwB,CAAxB,EAA2BC,IAR5C;AASI,MAAA,MAAM,EAAE,MAAM,KAAKC,iBAAL,CAAuB,KAAKrB,KAAL,CAAWW,IAAX,CAAgBnB,EAAvC,CATlB;AAUI,MAAA,GAAG,EAAE,MAAM,KAAKN,eAAL,CACP,KAAKc,KAAL,CAAWW,IAAX,CAAgBxB,IADT,EAEP,KAAKa,KAAL,CAAWW,IAAX,CAAgBvB,IAFT,EAGP,KAAKY,KAAL,CAAWW,IAAX,CAAgBG,QAHT,EAIP,KAAKd,KAAL,CAAWW,IAAX,CAAgBI,QAJT,EAKP,KAAKf,KAAL,CAAWW,IAAX,CAAgBpB,QALT,EAMP,KAAKS,KAAL,CAAWW,IAAX,CAAgBK,IAAhB,CAAqBC,KANd,EAOP,KAAKjB,KAAL,CAAWW,IAAX,CAAgBK,IAAhB,CAAqBE,GAPd,EAQP,KAAKlB,KAAL,CAAWW,IAAX,CAAgBnB,EART,EASP,KAAKQ,KAAL,CAAWW,IAAX,CAAgBQ,OAAhB,CAAwB,CAAxB,EAA2BC,IATpB,EAUP,KAAKpB,KAAL,CAAWP,OAVJ,CAVf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPJ,CADJ;AA+BA,WACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKiB,aADL,CADJ;AAKH;;AAzDiC;;AA4DtC,MAAMY,eAAe,GAAGC,KAAK,IAAI;AAC7B,SAAO;AACHZ,IAAAA,IAAI,EAAEY,KAAK,CAACJ,OAAN,CAAcR,IADjB;AAEHlB,IAAAA,OAAO,EAAE8B,KAAK,CAACC,IAAN,CAAW/B,OAFjB;AAGHC,IAAAA,eAAe,EAAE6B,KAAK,CAACC,IAAN,CAAWC;AAHzB,GAAP;AAKH,CAND;;AAQA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,SAAO;AACHzC,IAAAA,eAAe,EAAE,CAACM,EAAD,EAAKoC,IAAL,KAAcD,QAAQ,CAAC7C,cAAc,CAACI,eAAf,CAA+BM,EAA/B,EAAmCoC,IAAnC,CAAD;AADpC,GAAP;AAGH,CAJD;;AAMA,eAAejD,UAAU,CAACK,YAAY,CAACN,OAAO,CAAC4C,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CzC,aAA7C,CAAD,CAAb,CAAzB","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\nimport Aux from 'react-aux';\n\nimport WeatherResultItem from './WeatherResultItem/WeatherResultItem';\nimport * as actionCreators from '../../store/actions/index';\nimport { getDate } from '../../shared/utility';\n// import cityService from '../../services/city';\nimport { withFirebase } from '../Firebase';\n\nclass WeatherResult extends Component {\n    saveDataHandler = (name, temp, tempMax, tempMin, humidity,  id, localId) => {\n        const isAuthenticated = localStorage.getItem('token');\n        const uid = localStorage.getItem('uid');\n        if (isAuthenticated) {\n            console.log(id, localId);\n            this.props.firebase.db.collection('cities').doc(name).set({\n                name,\n                cityId: id,\n                uid\n            })\n            // this.props.saveDataHandler(id, localId);\n            // cityService.saveCity(this.props.city)\n            //     .then(res => res)\n            //     .catch(error => console.log('error'));\n        } else {\n            this.props.history.push('/login');\n        }\n    }\n\n    render() {\n        let resultSection = this.props.city === null ? '' : (\n            <div className=\"row\">\n                <div className=\"col-12-of-12\">\n                    <h3 className=\"third__heading\">\n                        <span className=\"third__heading--first\">Today /</span>\n                        <span className=\"third__heading--second\">{getDate()}</span>\n                    </h3>   \n                </div>\n                <WeatherResultItem \n                    cityName={this.props.city.name}\n                    temp={Math.round(this.props.city.temp)}\n                    tempMin={this.props.city.temp_min}\n                    tempMax={this.props.city.temp_max}\n                    humidity={this.props.city.humidity}\n                    windSpeed={this.props.city.wind.speed}\n                    windDeg={this.props.city.wind.deg}\n                    description={this.props.city.weather[0].main}\n                    remove={() => this.removeDataHandler(this.props.city.id)}\n                    add={() => this.saveDataHandler(\n                        this.props.city.name,\n                        this.props.city.temp,\n                        this.props.city.temp_min,\n                        this.props.city.temp_max,\n                        this.props.city.humidity,\n                        this.props.city.wind.speed,\n                        this.props.city.wind.deg,\n                        this.props.city.id,\n                        this.props.city.weather[0].main, \n                        this.props.localId)}/> \n            </div>  \n        );\n        return (\n            <Aux>\n                {resultSection}\n            </Aux>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        city: state.weather.city,\n        localId: state.auth.localId,\n        isAuthenticated: state.auth.token\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        saveDataHandler: (id, user) => dispatch(actionCreators.saveDataHandler(id, user))\n    }\n}\n\nexport default withRouter(withFirebase(connect(mapStateToProps, mapDispatchToProps)(WeatherResult)));"]},"metadata":{},"sourceType":"module"}